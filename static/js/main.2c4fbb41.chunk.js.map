{"version":3,"sources":["hooks/useCalculator.js","components/Calculator/Calculator.js","App.js","index.js"],"names":["useCalculator","useState","value","setValue","memoPlusValue","setMemoPlusValue","memoMinusValue","setMemoMinusValue","isMemoPlusEmpty","setIsMemoPlusEmpty","isMemoMinusEmpty","setIsMemoMinusEmpty","isRadValue","setIsRadValue","handleChangeValue","useCallback","newValue","document","activeElement","blur","handleComputeResult","result","eval","Infinity","Error","toString","prevValue","setTimeout","handleResetValue","handleBackspaceClick","length","slice","handleScreenKeyboardInput","evt","target","handleKeyboardInput","includes","key","handleErrors","action","isNaN","handleMemoPlusClick","handleMemoMinusClick","handleMemoResultClick","handleMemoClearClick","handleComputeSin","Math","sin","handleComputeCos","cos","handleComputeTg","tan","handleComputeCtg","a","handleComputeSqrt","sqrt","Calculator","mPlusScreenSegmentClassName","classNames","mMinusScreenSegmentClassName","radianSegmentClassName","useEffect","addEventListener","removeEventListener","className","type","readOnly","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"sjBAUMA,cAAgB,SAAhBA,gBAAuB,IAAD,UACAC,oDAAS,KADT,uLACnBC,MADmB,cACZC,SADY,yBAEgBF,oDAAS,GAFzB,wLAEnBG,cAFmB,cAEJC,iBAFI,yBAGkBJ,oDAAS,GAH3B,wLAGnBK,eAHmB,cAGHC,kBAHG,yBAIoBN,qDAAS,GAJ7B,wLAInBO,gBAJmB,cAIFC,mBAJE,yBAKsBR,qDAAS,GAL/B,yLAKnBS,iBALmB,eAKDC,oBALC,2BAMUV,qDAAS,GANnB,0LAMnBW,WANmB,eAMPC,cANO,eAcpBC,kBAAoBC,wDACxB,SAACC,GAIGb,SAHY,MAAVD,OAAkBA,MAGXA,MAAQc,EAFRA,GAIXC,SAASC,cAAcC,SAEzB,CAACjB,QAYGkB,oBAAsBL,wDAAY,WACtC,IACE,IAAMM,OAASC,KAAKpB,OACpB,GAAImB,SAAWE,IACb,MAAMC,QAENrB,SAASkB,OAAOI,YAElB,eACA,IAAMC,UAAYxB,MAClBC,SAAS,yCACTwB,YAAW,WACTxB,SAASuB,aACR,SAEJ,CAACxB,QAUE0B,iBAAmBb,wDAAY,WACnCZ,SAAS,KACTU,eAAc,KACb,IAUGgB,qBAAuBd,wDAAY,WACnCb,MAAM4B,OAAS,EACjB3B,SAASD,MAAM6B,MAAM,EAAG7B,MAAM4B,OAAS,IAEvC3B,SAAS,OAEV,CAACD,QASE8B,0BAA4BjB,wDAAY,SAACkB,GAAD,OAASnB,kBAAkBmB,EAAIC,OAAOhC,SAAQ,CAC1FY,oBAUIqB,oBAAsBpB,wDAC1B,SAACkB,GACsB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEeG,SAASH,EAAII,KAC5BvB,kBAAkBmB,EAAII,KACD,WAAZJ,EAAII,IACbT,oBACSK,EAAII,IACbjB,uBAEc,cAAZa,EAAII,KACNR,yBAGJ,CAACf,kBAAmBc,iBAAkBR,oBAAqBS,uBAevDS,aAAevB,wDACnB,SAACwB,GACC,IACE,IAAMlB,EAASkB,GAAQrC,OACvB,GAAIsC,MAAMnB,GACR,MAAMG,QAENrB,SAASkB,EAAOI,YAChBZ,eAAc,GAEhB,SACA,IAAMa,EAAYxB,MAClBC,SAAS,yCACTwB,YAAW,WACTxB,SAASuB,KACR,SAGP,CAACxB,QAYGuC,oBAAsB1B,wDAAY,WACtC,IACE,GAAIyB,OAAOtC,OACT,MAAMsB,QAGNnB,iBADiBD,gBAAiBF,OAElCO,oBAAmB,GAErB,SACA,IAAMiB,EAAYxB,MAClBC,SAAS,yCACTwB,YAAW,WACTxB,SAASuB,KACR,SAEJ,CAACxB,MAAOE,gBAWLsC,qBAAuB3B,wDAAY,WACvC,IACE,GAAIyB,OAAOtC,OACT,MAAMsB,QAGNjB,kBADiBD,iBAAkBJ,OAEnCS,qBAAoB,GAEtB,SACA,IAAMe,EAAYxB,MAClBC,SAAS,yCACTwB,YAAW,WACTxB,SAASuB,KACR,SAEJ,CAACxB,MAAOI,iBAWLqC,sBAAwB5B,wDAAY,WAExCZ,UADwBC,cAAgBE,gBACfmB,cACxB,CAACrB,cAAeE,iBAUbsC,qBAAuB7B,wDAAY,WACvCV,iBAAiB,GACjBE,kBAAkB,GAClBE,oBAAmB,GACnBE,qBAAoB,KACnB,IAWGkC,iBAAmB9B,wDAAY,WACnCuB,aAAaQ,KAAKC,OACjB,CAACT,eAWEU,iBAAmBjC,wDAAY,WACnCuB,aAAaQ,KAAKG,OACjB,CAACX,eAWEY,gBAAkBnC,wDAAY,WAClCuB,aAAaQ,KAAKK,OACjB,CAACb,eAWEc,iBAAmBrC,wDAAY,WACnCuB,cAAa,SAACe,GAAD,OAAO,EAAIP,KAAKK,IAAIE,QAChC,CAACf,eAWEgB,kBAAoBvC,wDAAY,WACpCuB,aAAaQ,KAAKS,QACjB,CAACjB,eAEJ,MAAO,CACLpC,YACA8B,oDACAG,wCACAP,kCACAR,wCACAqB,wCACAC,0CACAE,0CACAD,4CACAE,kCACAG,kCACAE,gCACAE,kCACAE,oCACAzB,0CACArB,gCACAE,kCACAE,yB,iLC1UE4C,EAAa,WAAO,IAAD,EAoBnBxD,cAlBFE,EAFqB,EAErBA,MACA8B,EAHqB,EAGrBA,0BACAG,EAJqB,EAIrBA,oBACAP,EALqB,EAKrBA,iBACAR,EANqB,EAMrBA,oBACAqB,EAPqB,EAOrBA,oBACAC,EARqB,EAQrBA,qBACAE,EATqB,EASrBA,qBACAD,EAVqB,EAUrBA,sBACAE,EAXqB,EAWrBA,iBACAG,EAZqB,EAYrBA,iBACAE,EAbqB,EAarBA,gBACAE,EAdqB,EAcrBA,iBACAE,EAfqB,EAerBA,kBACAzB,EAhBqB,EAgBrBA,qBACArB,EAjBqB,EAiBrBA,gBACAE,EAlBqB,EAkBrBA,iBACAE,EAnBqB,EAmBrBA,WAGI6C,EAA8BC,IAClC,6BACA,yCACA,CACE,sCAAuClD,IAIrCmD,EAA+BD,IACnC,6BACA,0CACA,CACE,sCAAuChD,IAIrCkD,EAAyBF,IAC7B,6BACA,sCACA,CACE,qCAAsC9C,IAS1C,OALAiD,qBAAU,WAER,OADA5C,SAAS6C,iBAAiB,UAAW3B,GAC9B,kBAAMlB,SAAS8C,oBAAoB,UAAW5B,MACpD,CAACA,IAGF,sBAAK6B,UAAU,8BAAf,UACE,sBAAKA,UAAU,2BAAf,UACE,sBAAMA,UAAWP,EAAjB,gBACA,sBAAMO,UAAWL,EAAjB,gBACA,sBAAMK,UAAWJ,EAAjB,iBACA,uBAAOK,KAAK,OAAOC,UAAQ,EAAChE,MAAOA,EAAO8D,UAAU,0BAGtD,sBAAKA,UAAU,sBAAf,UACE,wBACEC,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,gDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAAS/C,EACT4C,UAAU,qDAHZ,eAOA,wBACEC,KAAK,SACLE,QAASnC,EACTgC,UAAU,mDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,oDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,uDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,uDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASnC,EACTgC,UAAU,kDACV9D,MAAM,IAJR,eAQA,wBACE+D,KAAK,SACLE,QAASvC,EACToC,UAAU,gDAHZ,eAOA,wBACEC,KAAK,SACLE,QAASvB,EACToB,UAAU,iDAHZ,gBAOA,wBACEC,KAAK,SACLE,QAASxB,EACTqB,UAAU,iDAHZ,gBAOA,wBACEC,KAAK,SACLE,QAAS1B,EACTuB,UAAU,qDAHZ,gBAOA,wBACEC,KAAK,SACLE,QAASzB,EACTsB,UAAU,sDAHZ,gBAQA,wBACEC,KAAK,SACLE,QAAStB,EACTmB,UAAU,kDAHZ,iBAOA,wBACEC,KAAK,SACLE,QAASnB,EACTgB,UAAU,kDAHZ,iBAOA,wBACEC,KAAK,SACLE,QAASjB,EACTc,UAAU,iDAHZ,gBAOA,wBACEC,KAAK,SACLE,QAASf,EACTY,UAAU,kDAHZ,iBAOA,wBACEC,KAAK,SACLE,QAASb,EACTU,UAAU,mDAHZ,oBAOA,wBACEC,KAAK,SACLE,QAAStC,EACTmC,UAAU,wDAHZ,2B,MClQOI,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,W","file":"static/js/main.2c4fbb41.chunk.js","sourcesContent":["import { useState, useCallback } from 'react';\n\n/**\n * @module useCalculator\n * @description Хук useCalculator.</br>\n * Содержит логику калькулятора. Возвращает значение, которое отображается\n *  на дисплее калькулятора, и методы - обработчики нажатия на кнопки калькулятора.\n * @since v.1.0.0\n * @returns {object}\n */\nconst useCalculator = () => {\n  const [value, setValue] = useState('0');\n  const [memoPlusValue, setMemoPlusValue] = useState(0);\n  const [memoMinusValue, setMemoMinusValue] = useState(0);\n  const [isMemoPlusEmpty, setIsMemoPlusEmpty] = useState(true);\n  const [isMemoMinusEmpty, setIsMemoMinusEmpty] = useState(true);\n  const [isRadValue, setIsRadValue] = useState(false);\n  /**\n   * @method handleChangeValue\n   * @description Обработчик изменения значения, выводимого на дисплей калькулятора.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleChangeValue = useCallback(\n    (newValue) => {\n      if (value === '0' || !value) {\n        setValue(newValue);\n      } else {\n        setValue(value + newValue);\n      }\n      document.activeElement.blur();\n    },\n    [value],\n  );\n\n  /**\n   * @method handleComputeResult\n   * @description Обработчик нажатия на клавишу \"равно\", вычисляет введенное выражение\n   *  и выводит его на дисплей. Если в процессе выичсления происходит \"деление на нуль\",\n   *  на дисплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeResult = useCallback(() => {\n    try {\n      const result = eval(value);\n      if (result === Infinity) {\n        throw Error();\n      } else {\n        setValue(result.toString());\n      }\n    } catch {\n      const prevValue = value;\n      setValue('Ошибка!');\n      setTimeout(() => {\n        setValue(prevValue);\n      }, 1100);\n    }\n  }, [value]);\n\n  /**\n   * @method handleResetValue\n   * @description Обработчик нажатия на кнопку очистки дисплея.</br>\n   * Сбрасывает значение на дисплее на 0.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleResetValue = useCallback(() => {\n    setValue('0');\n    setIsRadValue(false);\n  }, []);\n\n  /**\n   * @method handleBackspaceClick\n   * @description Обработчик нажатия на клавишу Backspace.</br>\n   * Удаляет последний введенный символ на дисплее.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleBackspaceClick = useCallback(() => {\n    if (value.length > 1) {\n      setValue(value.slice(0, value.length - 1));\n    } else {\n      setValue('0');\n    }\n  }, [value]);\n\n  /**\n   * @method handleScreenKeyboardInput\n   * @description Обработчик ввода с кнопок калькулятора на экране\n   * @since v.1.1.0\n   * @public\n   * @returns {void}\n   */\n  const handleScreenKeyboardInput = useCallback((evt) => handleChangeValue(evt.target.value), [\n    handleChangeValue,\n  ]);\n\n  /**\n   * @method handleKeyboardInput\n   * @description Обработчик ввода с клавиатуры\n   * @since v.1.1.0\n   * @public\n   * @returns {void}\n   */\n  const handleKeyboardInput = useCallback(\n    (evt) => {\n      const keyboardKeys = [\n        '0',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '+',\n        '-',\n        '*',\n        '/',\n        '.',\n      ];\n      if (keyboardKeys.includes(evt.key)) {\n        handleChangeValue(evt.key);\n      } else if (evt.key === 'Escape') {\n        handleResetValue();\n      } else if (evt.key === 'Enter' || '=') {\n        handleComputeResult();\n      }\n      if (evt.key === 'Backspace') {\n        handleBackspaceClick();\n      }\n    },\n    [handleChangeValue, handleResetValue, handleComputeResult, handleBackspaceClick],\n  );\n\n  /**\n   * @method handleErrors\n   * @description Обработчик ошибок при выполнении математических действий.</br>\n   *  Принимает аргументом коллбэк action, который выполняет определенное действие.\n   *  Если в результате выполнения этого действия не произошло ошибок вычисления, результат\n   *  выводится на дисплей калькулятора. Если происходит ошибка вычисления, на дисплей\n   *  выводится сообщение об ошибке.\n   * @param {function} action - коллбэк, выполняет определенное действие с введенным значением.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleErrors = useCallback(\n    (action) => {\n      try {\n        const result = action(+value);\n        if (isNaN(result)) {\n          throw Error();\n        } else {\n          setValue(result.toString());\n          setIsRadValue(true);\n        }\n      } catch {\n        const prevValue = value;\n        setValue('Ошибка!');\n        setTimeout(() => {\n          setValue(prevValue);\n        }, 1100);\n      }\n    },\n    [value],\n  );\n\n  /**\n   * @method handleMemoPlusClick\n   * @description Обработчик нажатия на клавишу M+.</br>\n   * Проверяет корректность значения на дисплее и сохраняет его в память, если\n   *  сохраняемое значение является числом.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleMemoPlusClick = useCallback(() => {\n    try {\n      if (isNaN(+value)) {\n        throw Error();\n      } else {\n        const newValue = memoPlusValue + +value;\n        setMemoPlusValue(newValue);\n        setIsMemoPlusEmpty(false);\n      }\n    } catch {\n      const prevValue = value;\n      setValue('Ошибка!');\n      setTimeout(() => {\n        setValue(prevValue);\n      }, 1100);\n    }\n  }, [value, memoPlusValue]);\n\n  /**\n   * @method handleMemoMinusClick\n   * @description Обработчик нажатия на клавишу M-.</br>\n   * Проверяет корректность значения на дисплее и сохраняет его в память, если\n   *  сохраняемое значение является числом.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleMemoMinusClick = useCallback(() => {\n    try {\n      if (isNaN(+value)) {\n        throw Error();\n      } else {\n        const newValue = memoMinusValue + +value;\n        setMemoMinusValue(newValue);\n        setIsMemoMinusEmpty(false);\n      }\n    } catch {\n      const prevValue = value;\n      setValue('Ошибка!');\n      setTimeout(() => {\n        setValue(prevValue);\n      }, 1100);\n    }\n  }, [value, memoMinusValue]);\n\n  /**\n   * @method handleMemoResultClick\n   * @description Обработчик нажатия на кнопку MR.</br>\n   * Вычисляет разницу между значениями, сохраненными в ячейках памяти, и выводит\n   *  результат на дисплей.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleMemoResultClick = useCallback(() => {\n    const memoResultValue = memoPlusValue - memoMinusValue;\n    setValue(memoResultValue.toString());\n  }, [memoPlusValue, memoMinusValue]);\n\n  /**\n   * @method handleMemoClearClick\n   * @description Обработчик нажатия на кнопку MC.</br>\n   * Очищает ячейки памяти от сохраненных в них значений.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleMemoClearClick = useCallback(() => {\n    setMemoPlusValue(0);\n    setMemoMinusValue(0);\n    setIsMemoPlusEmpty(true);\n    setIsMemoMinusEmpty(true);\n  }, []);\n\n  /**\n   * @method handleComputeSin\n   * @description Обработчик нажатия на кнопку sin.</br>\n   * Вычисляет значение синуса в радианах и выводит результат на дисплей.\n   *  Если в процессе вычисления происходит ошибка, на дсиплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeSin = useCallback(() => {\n    handleErrors(Math.sin);\n  }, [handleErrors]);\n\n  /**\n   * @method handleComputeCos\n   * @description Обработчик нажатия на кнопку cos.</br>\n   * Вычисляет значение косинуса в радианах и выводит результат на дисплей.\n   *  Если в процессе вычисления происходит ошибка, на дсиплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeCos = useCallback(() => {\n    handleErrors(Math.cos);\n  }, [handleErrors]);\n\n  /**\n   * @method handleComputeTg\n   * @description Обработчик нажатия на кнопку tg.</br>\n   * Вычисляет значение тангенса в радианах и выводит результат на дисплей.\n   *  Если в процессе вычисления происходит ошибка, на дсиплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeTg = useCallback(() => {\n    handleErrors(Math.tan);\n  }, [handleErrors]);\n\n  /**\n   * @method handleComputeCtg\n   * @description Обработчик нажатия на кнопку ctg.</br>\n   * Вычисляет значение котангенса в радианах и выводит результат на дисплей.\n   *  Если в процессе вычисления происходит ошибка, на дсиплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeCtg = useCallback(() => {\n    handleErrors((a) => 1 / Math.tan(a));\n  }, [handleErrors]);\n\n  /**\n   * @method handleComputeSqrt\n   * @description Обработчик нажатия на кнопку \"квадратный корень\".</br>\n   * Вычисляет квадратный корень введенного значения и выводит результат на дисплей.\n   *  Если в процессе вычисления происходит ошибка, на дсиплей выводится сообщение об ошибке.\n   * @since v.1.0.0\n   * @public\n   * @returns {void}\n   */\n  const handleComputeSqrt = useCallback(() => {\n    handleErrors(Math.sqrt);\n  }, [handleErrors]);\n\n  return {\n    value,\n    handleScreenKeyboardInput,\n    handleKeyboardInput,\n    handleResetValue,\n    handleComputeResult,\n    handleMemoPlusClick,\n    handleMemoMinusClick,\n    handleMemoClearClick,\n    handleMemoResultClick,\n    handleComputeSin,\n    handleComputeCos,\n    handleComputeTg,\n    handleComputeCtg,\n    handleComputeSqrt,\n    handleBackspaceClick,\n    isMemoPlusEmpty,\n    isMemoMinusEmpty,\n    isRadValue,\n  };\n};\nexport { useCalculator };\n","import { useCalculator } from '../../hooks/useCalculator';\nimport classNames from 'classnames';\nimport './Calculator.css';\nimport { useEffect } from 'react';\n\n/**\n * @module Calculator\n * @description Компонент Calculator.</br>Отвечает за отрисовку калькулятора.\n * @since v.1.0.0\n * @returns {JSX}\n */\nconst Calculator = () => {\n  const {\n    value,\n    handleScreenKeyboardInput,\n    handleKeyboardInput,\n    handleResetValue,\n    handleComputeResult,\n    handleMemoPlusClick,\n    handleMemoMinusClick,\n    handleMemoClearClick,\n    handleMemoResultClick,\n    handleComputeSin,\n    handleComputeCos,\n    handleComputeTg,\n    handleComputeCtg,\n    handleComputeSqrt,\n    handleBackspaceClick,\n    isMemoPlusEmpty,\n    isMemoMinusEmpty,\n    isRadValue,\n  } = useCalculator();\n\n  const mPlusScreenSegmentClassName = classNames(\n    'calculator__screen-segment',\n    'calculator__screen-segment_type_m-plus',\n    {\n      'calculator__screen-segment_visible': !isMemoPlusEmpty,\n    },\n  );\n\n  const mMinusScreenSegmentClassName = classNames(\n    'calculator__screen-segment',\n    'calculator__screen-segment_type_m-minus',\n    {\n      'calculator__screen-segment_visible': !isMemoMinusEmpty,\n    },\n  );\n\n  const radianSegmentClassName = classNames(\n    'calculator__screen-segment',\n    'calculator__screen-segment_type_rad',\n    {\n      'calculator__screen-segment_visible': isRadValue,\n    },\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyboardInput);\n    return () => document.removeEventListener('keydown', handleKeyboardInput);\n  }, [handleKeyboardInput]);\n\n  return (\n    <div className=\"calculator page__calculator\">\n      <div className=\"calculator__screen-field\">\n        <span className={mPlusScreenSegmentClassName}>M+</span>\n        <span className={mMinusScreenSegmentClassName}>M-</span>\n        <span className={radianSegmentClassName}>rad</span>\n        <input type=\"text\" readOnly value={value} className=\"calculator__screen\"></input>\n      </div>\n\n      <div className=\"calculator__buttons\">\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_1\"\n          value=\"1\"\n        >\n          1\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_2\"\n          value=\"2\"\n        >\n          2\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_3\"\n          value=\"3\"\n        >\n          3\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_4\"\n          value=\"4\"\n        >\n          4\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_5\"\n          value=\"5\"\n        >\n          5\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_6\"\n          value=\"6\"\n        >\n          6\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_7\"\n          value=\"7\"\n        >\n          7\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_8\"\n          value=\"8\"\n        >\n          8\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_9\"\n          value=\"9\"\n        >\n          9\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_0\"\n          value=\"0\"\n        >\n          0\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleComputeResult}\n          className=\"calculator__button calculator__button_value_result\"\n        >\n          =\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_plus\"\n          value=\"+\"\n        >\n          +\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_minus\"\n          value=\"-\"\n        >\n          -\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_multiply\"\n          value=\"*\"\n        >\n          x\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_division\"\n          value=\"/\"\n        >\n          /\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleScreenKeyboardInput}\n          className=\"calculator__button calculator__button_value_dot\"\n          value=\".\"\n        >\n          .\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleResetValue}\n          className=\"calculator__button calculator__button_value_C\"\n        >\n          C\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleMemoClearClick}\n          className=\"calculator__button calculator__button_value_MC\"\n        >\n          MC\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleMemoResultClick}\n          className=\"calculator__button calculator__button_value_MR\"\n        >\n          MR\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleMemoPlusClick}\n          className=\"calculator__button calculator__button_value_M-PLUS\"\n        >\n          M+\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleMemoMinusClick}\n          className=\"calculator__button calculator__button_value_M-MINUS\"\n        >\n          M-\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleComputeSin}\n          className=\"calculator__button calculator__button_value_sin\"\n        >\n          sin\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleComputeCos}\n          className=\"calculator__button calculator__button_value_cos\"\n        >\n          cos\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleComputeTg}\n          className=\"calculator__button calculator__button_value_tg\"\n        >\n          tg\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleComputeCtg}\n          className=\"calculator__button calculator__button_value_ctg\"\n        >\n          ctg\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleComputeSqrt}\n          className=\"calculator__button calculator__button_value_sqrt\"\n        >\n          &#8730;\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleBackspaceClick}\n          className=\"calculator__button calculator__button_value_backspace\"\n        >\n          &#10233;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport { Calculator };\n","import { Calculator } from './components/Calculator/Calculator';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Calculator />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"page\")\n);\n"],"sourceRoot":""}